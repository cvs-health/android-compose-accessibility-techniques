/*
   Copyright 2024-2025 CVS Health and/or one of its affiliates

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */
package com.cvshealth.composeaccessibilitytechniques

import androidx.compose.ui.test.hasTestTag
import androidx.compose.ui.test.hasText
import androidx.compose.ui.test.junit4.createAndroidComposeRule
import androidx.compose.ui.test.onNodeWithTag
import androidx.compose.ui.test.onNodeWithText
import androidx.compose.ui.test.performClick
import androidx.compose.ui.test.performScrollTo
import com.cvshealth.accessibility.apps.composeaccessibilitytechniques.MainActivity
import com.cvshealth.accessibility.apps.composeaccessibilitytechniques.R
import com.cvshealth.accessibility.apps.composeaccessibilitytechniques.ui.components.genericScaffoldBackButtonTestTag
import com.cvshealth.accessibility.apps.composeaccessibilitytechniques.ui.components.genericScaffoldTitleTestTag
import com.cvshealth.accessibility.apps.composeaccessibilitytechniques.ui.home.homeScreenTitleTestTag
import org.junit.Rule
import org.junit.Test

class AllScreensOpenTests {
    @get:Rule
    val composeTestRule = createAndroidComposeRule<MainActivity>()

//    @Before
//    fun setup() {
//        // Expand all accordions on Home screen.
//        composeTestRule
//            .onNodeWithText(composeTestRule.activity.getString(R.string.home_informative_content))
//            .performScrollTo()
//            .performClick()
//        composeTestRule
//            .onNodeWithText(composeTestRule.activity.getString(R.string.home_interactive_behaviors))
//            .performScrollTo()
//            .performClick()
//        composeTestRule
//            .onNodeWithText(composeTestRule.activity.getString(R.string.home_components))
//            .performScrollTo()
//            .performClick()
//    }

    @Test
    fun verifyTextAlternativesScreenOpens() {
        expandInformativeContentAccordion()
        composeTestRule
            .onNodeWithText(composeTestRule.activity.getString(R.string.text_alternatives_title))
            .performScrollTo()
            .performClick()
        composeTestRule
            .onNode(
                hasTestTag(genericScaffoldTitleTestTag)
                and
                hasText(composeTestRule.activity.getString(R.string.text_alternatives_title))
            )
            .assertExists()
        goHome()
    }

    @Test
    fun verifyAccessibilityTraversalOrderScreenOpens() {
        expandInformativeContentAccordion()
        composeTestRule
            .onNodeWithText(composeTestRule.activity.getString(R.string.accessibility_traversal_order_title))
            .performScrollTo()
            .performClick()
        composeTestRule
            .onNode(
                hasTestTag(genericScaffoldTitleTestTag)
                and
                hasText(composeTestRule.activity.getString(R.string.accessibility_traversal_order_title))
            )
            .assertExists()
        goHome()
    }

    @Test
    fun verifyContentGroupingScreenOpens() {
        expandInformativeContentAccordion()
        composeTestRule
            .onNodeWithText(composeTestRule.activity.getString(R.string.content_grouping_title))
            .performScrollTo()
            .performClick()
        composeTestRule
            .onNode(
                hasTestTag(genericScaffoldTitleTestTag)
                and
                hasText(composeTestRule.activity.getString(R.string.content_grouping_title))
            )
            .assertExists()
        goHome()
    }

    @Test
    fun verifyContentGroupReplacementScreenOpens() {
        expandInformativeContentAccordion()
        composeTestRule
            .onNodeWithText(composeTestRule.activity.getString(R.string.content_group_replacement_title))
            .performScrollTo()
            .performClick()
        composeTestRule
            .onNode(
                hasTestTag(genericScaffoldTitleTestTag)
                and
                hasText(composeTestRule.activity.getString(R.string.content_group_replacement_title))
            )
            .assertExists()
        goHome()
    }

    @Test
    fun verifyHeadingSemanticsScreenOpens() {
        expandInformativeContentAccordion()
        composeTestRule
            .onNodeWithText(composeTestRule.activity.getString(R.string.heading_semantics_title))
            .performScrollTo()
            .performClick()
        composeTestRule
            .onNode(
                hasTestTag(genericScaffoldTitleTestTag)
                and
                hasText(composeTestRule.activity.getString(R.string.heading_semantics_title))
            )
            .assertExists()
        goHome()
    }

    @Test
    fun verifyListSemanticsScreenOpens() {
        expandInformativeContentAccordion()
        composeTestRule
            .onNodeWithText(composeTestRule.activity.getString(R.string.list_semantics_title))
            .performScrollTo()
            .performClick()
        composeTestRule
            .onNode(
                hasTestTag(genericScaffoldTitleTestTag)
                and
                hasText(composeTestRule.activity.getString(R.string.list_semantics_title))
            )
            .assertExists()
        goHome()
    }

    @Test
    fun verifyAdaptiveLayoutsScreenOpens() {
        expandInformativeContentAccordion()
        composeTestRule
            .onNodeWithText(composeTestRule.activity.getString(R.string.adaptive_layouts_title))
            .performScrollTo()
            .performClick()
        composeTestRule
            .onNode(
                hasTestTag(genericScaffoldTitleTestTag)
                and
                hasText(composeTestRule.activity.getString(R.string.adaptive_layouts_title))
            )
            .assertExists()
        goHome()
    }

    @Test
    fun verifyDarkAndLightThemesScreenOpens() {
        expandInformativeContentAccordion()
        composeTestRule
            .onNodeWithText(composeTestRule.activity.getString(R.string.dark_theme_title))
            .performScrollTo()
            .performClick()
        composeTestRule
            .onNode(
                hasTestTag(genericScaffoldTitleTestTag)
                and
                hasText(composeTestRule.activity.getString(R.string.dark_theme_title))
            )
            .assertExists()
        goHome()
    }

    @Test
    fun verifyScreenAndPaneTitlesScreenOpens() {
        expandInformativeContentAccordion()
        composeTestRule
            .onNodeWithText(composeTestRule.activity.getString(R.string.screen_and_pane_titles_title))
            .performScrollTo()
            .performClick()
        composeTestRule
            .onNode(
                hasTestTag(genericScaffoldTitleTestTag)
                and
                hasText(composeTestRule.activity.getString(R.string.screen_and_pane_titles_title))
            )
            .assertExists()
        goHome()
    }

    @Test
    fun verifyInteractiveControlLabelsScreenOpens() {
        expandInteractiveBehaviorsAccordion()
        composeTestRule
            .onNodeWithText(composeTestRule.activity.getString(R.string.interactive_control_labels_title))
            .performScrollTo()
            .performClick()
        composeTestRule
            .onNode(
                hasTestTag(genericScaffoldTitleTestTag)
                and
                hasText(composeTestRule.activity.getString(R.string.interactive_control_labels_title))
            )
            .assertExists()
        goHome()
    }

    @Test
    fun verifyMinimumTouchTargetSizeScreenOpens() {
        expandInteractiveBehaviorsAccordion()
        composeTestRule
            .onNodeWithText(composeTestRule.activity.getString(R.string.target_size_title))
            .performScrollTo()
            .performClick()
        composeTestRule
            .onNode(
                hasTestTag(genericScaffoldTitleTestTag)
                and
                hasText(composeTestRule.activity.getString(R.string.target_size_title))
            )
            .assertExists()
        goHome()
    }

    @Test
    fun verifyUxChangeAnnouncementsScreenOpens() {
        expandInteractiveBehaviorsAccordion()
        composeTestRule
            .onNodeWithText(composeTestRule.activity.getString(R.string.ux_change_announcements_title))
            .performScrollTo()
            .performClick()
        composeTestRule
            .onNode(
                hasTestTag(genericScaffoldTitleTestTag)
                and
                hasText(composeTestRule.activity.getString(R.string.ux_change_announcements_title))
            )
            .assertExists()
        goHome()
    }

    @Test
    fun verifyKeyboardTypesAndOptionsScreenOpens() {
        expandInteractiveBehaviorsAccordion()
        composeTestRule
            .onNodeWithText(composeTestRule.activity.getString(R.string.keyboard_types_title))
            .performScrollTo()
            .performClick()
        composeTestRule
            .onNode(
                hasTestTag(genericScaffoldTitleTestTag)
                and
                hasText(composeTestRule.activity.getString(R.string.keyboard_types_title))
            )
            .assertExists()
        goHome()
    }

    @Test
    fun verifyKeyboardActionsScreenOpens() {
        expandInteractiveBehaviorsAccordion()
        composeTestRule
            .onNodeWithText(composeTestRule.activity.getString(R.string.keyboard_actions_title))
            .performScrollTo()
            .performClick()
        composeTestRule
            .onNode(
                hasTestTag(genericScaffoldTitleTestTag)
                and
                hasText(composeTestRule.activity.getString(R.string.keyboard_actions_title))
            )
            .assertExists()
        goHome()
    }

    @Test
    fun verifyKeyboardFocusOrderScreenOpens() {
        expandInteractiveBehaviorsAccordion()
        composeTestRule
            .onNodeWithText(composeTestRule.activity.getString(R.string.keyboard_focus_order_title))
            .performScrollTo()
            .performClick()
        composeTestRule
            .onNode(
                hasTestTag(genericScaffoldTitleTestTag)
                and
                hasText(composeTestRule.activity.getString(R.string.keyboard_focus_order_title))
            )
            .assertExists()
        goHome()
    }

    @Test
    fun verifyCustomFocusIndicatorsScreenOpens() {
        expandInteractiveBehaviorsAccordion()
        composeTestRule
            .onNodeWithText(composeTestRule.activity.getString(R.string.custom_focus_indicators_title))
            .performScrollTo()
            .performClick()
        composeTestRule
            .onNode(
                hasTestTag(genericScaffoldTitleTestTag)
                and
                hasText(composeTestRule.activity.getString(R.string.custom_focus_indicators_title))
            )
            .assertExists()
        goHome()
    }

    @Test
    fun verifyCustomClickLabelsScreenOpens() {
        expandInteractiveBehaviorsAccordion()
        composeTestRule
            .onNodeWithText(composeTestRule.activity.getString(R.string.custom_click_labels_title))
            .performScrollTo()
            .performClick()
        composeTestRule
            .onNode(
                hasTestTag(genericScaffoldTitleTestTag)
                and
                hasText(composeTestRule.activity.getString(R.string.custom_click_labels_title))
            )
            .assertExists()
        goHome()
    }

    @Test
    fun verifyCustomStateDescriptionsScreenOpens() {
        expandInteractiveBehaviorsAccordion()
        composeTestRule
            .onNodeWithText(composeTestRule.activity.getString(R.string.custom_state_descriptions_title))
            .performScrollTo()
            .performClick()
        composeTestRule
            .onNode(
                hasTestTag(genericScaffoldTitleTestTag)
                and
                hasText(composeTestRule.activity.getString(R.string.custom_state_descriptions_title))
            )
            .assertExists()
        goHome()
    }

    @Test
    fun verifyCustomAccessibilityActionsScreenOpens() {
        expandInteractiveBehaviorsAccordion()
        composeTestRule
            .onNodeWithText(composeTestRule.activity.getString(R.string.custom_accessibility_actions_title))
            .performScrollTo()
            .performClick()
        composeTestRule
            .onNode(
                hasTestTag(genericScaffoldTitleTestTag)
                and
                hasText(composeTestRule.activity.getString(R.string.custom_accessibility_actions_title))
            )
            .assertExists()
        goHome()
    }

    @Test
    fun verifyAccordionControlsScreenOpens() {
        expandSpecificComponentTypesAccordion()
        composeTestRule
            .onNodeWithText(composeTestRule.activity.getString(R.string.accordion_title))
            .performScrollTo()
            .performClick()
        composeTestRule
            .onNode(
                hasTestTag(genericScaffoldTitleTestTag)
                and
                hasText(composeTestRule.activity.getString(R.string.accordion_title))
            )
            .assertExists()
        goHome()
    }

    @Test
    fun verifyAutofillControlsScreenOpens() {
        expandSpecificComponentTypesAccordion()
        composeTestRule
            .onNodeWithText(composeTestRule.activity.getString(R.string.autofill_title))
            .performScrollTo()
            .performClick()
        composeTestRule
            .onNode(
                hasTestTag(genericScaffoldTitleTestTag)
                and
                hasText(composeTestRule.activity.getString(R.string.autofill_title))
            )
            .assertExists()
        goHome()
    }

    @Test
    fun verifyCheckboxControlsScreenOpens() {
        expandSpecificComponentTypesAccordion()
        composeTestRule
            .onNodeWithText(composeTestRule.activity.getString(R.string.checkbox_controls_title))
            .performScrollTo()
            .performClick()
        composeTestRule
            .onNode(
                hasTestTag(genericScaffoldTitleTestTag)
                and
                hasText(composeTestRule.activity.getString(R.string.checkbox_controls_title))
            )
            .assertExists()
        goHome()
    }

    @Test
    fun verifyDropdownMenusScreenOpens() {
        expandSpecificComponentTypesAccordion()
        composeTestRule
            .onNodeWithText(composeTestRule.activity.getString(R.string.dropdown_menus_title))
            .performScrollTo()
            .performClick()
        composeTestRule
            .onNode(
                hasTestTag(genericScaffoldTitleTestTag)
                and
                hasText(composeTestRule.activity.getString(R.string.dropdown_menus_title))
            )
            .assertExists()
        goHome()
    }

    @Test
    fun verifyExposedDropdownMenusScreenOpens() {
        expandSpecificComponentTypesAccordion()
        composeTestRule
            .onNodeWithText(composeTestRule.activity.getString(R.string.exposed_dropdown_menus_title))
            .performScrollTo()
            .performClick()
        composeTestRule
            .onNode(
                hasTestTag(genericScaffoldTitleTestTag)
                and
                hasText(composeTestRule.activity.getString(R.string.exposed_dropdown_menus_title))
            )
            .assertExists()
        goHome()
    }

    @Test
    fun verifyLinksInlineWithTextScreenOpens() {
        expandSpecificComponentTypesAccordion()
        composeTestRule
            .onNodeWithText(composeTestRule.activity.getString(R.string.inline_links_title))
            .performScrollTo()
            .performClick()
        composeTestRule
            .onNode(
                hasTestTag(genericScaffoldTitleTestTag)
                and
                hasText(composeTestRule.activity.getString(R.string.inline_links_title))
            )
            .assertExists()
        goHome()
    }

    @Test
    fun verifyListItemLayoutsScreenOpens() {
        expandSpecificComponentTypesAccordion()
        composeTestRule
            .onNodeWithText(composeTestRule.activity.getString(R.string.listitem_layouts_title))
            .performScrollTo()
            .performClick()
        composeTestRule
            .onNode(
                hasTestTag(genericScaffoldTitleTestTag)
                and
                hasText(composeTestRule.activity.getString(R.string.listitem_layouts_title))
            )
            .assertExists()
        goHome()
    }

    @Test
    fun verifyModalBottomSheetLayoutsScreenOpens() {
        expandSpecificComponentTypesAccordion()
        composeTestRule
            .onNodeWithText(composeTestRule.activity.getString(R.string.modalbottomsheet_layouts_title))
            .performScrollTo()
            .performClick()
        composeTestRule
            .onNode(
                hasTestTag(genericScaffoldTitleTestTag)
                and
                hasText(composeTestRule.activity.getString(R.string.modalbottomsheet_layouts_title))
            )
            .assertExists()
        goHome()
    }

    @Test
    fun verifyNavigationBarLayoutsScreenOpens() {
        expandSpecificComponentTypesAccordion()
        composeTestRule
            .onNodeWithText(composeTestRule.activity.getString(R.string.navigationbar_layouts_title))
            .performScrollTo()
            .performClick()
        composeTestRule
            .onNode(
                hasTestTag(genericScaffoldTitleTestTag)
                and
                hasText(composeTestRule.activity.getString(R.string.navigationbar_layouts_title))
            )
            .assertExists()
        goHome()
    }

    @Test
    fun verifyPopupMessagesScreenOpens() {
        expandSpecificComponentTypesAccordion()
        composeTestRule
            .onNodeWithText(composeTestRule.activity.getString(R.string.popup_messages_title))
            .performScrollTo()
            .performClick()
        composeTestRule
            .onNode(
                hasTestTag(genericScaffoldTitleTestTag)
                and
                hasText(composeTestRule.activity.getString(R.string.popup_messages_title))
            )
            .assertExists()
        goHome()
    }

    @Test
    fun verifyRadioButtonGroupsScreenOpens() {
        expandSpecificComponentTypesAccordion()
        composeTestRule
            .onNodeWithText(composeTestRule.activity.getString(R.string.radio_button_groups_title))
            .performScrollTo()
            .performClick()
        composeTestRule
            .onNode(
                hasTestTag(genericScaffoldTitleTestTag)
                and
                hasText(composeTestRule.activity.getString(R.string.radio_button_groups_title))
            )
            .assertExists()
        goHome()
    }

    @Test
    fun verifySliderAndRangeSliderControlsScreenOpens() {
        expandSpecificComponentTypesAccordion()
        composeTestRule
            .onNodeWithText(composeTestRule.activity.getString(R.string.slider_controls_title))
            .performScrollTo()
            .performClick()
        composeTestRule
            .onNode(
                hasTestTag(genericScaffoldTitleTestTag)
                and
                hasText(composeTestRule.activity.getString(R.string.slider_controls_title))
            )
            .assertExists()
        goHome()
    }

    @Test
    fun verifyStandAloneLinksScreenOpens() {
        expandSpecificComponentTypesAccordion()
        composeTestRule
            .onNodeWithText(composeTestRule.activity.getString(R.string.standalone_links_title))
            .performScrollTo()
            .performClick()
        composeTestRule
            .onNode(
                hasTestTag(genericScaffoldTitleTestTag)
                and
                hasText(composeTestRule.activity.getString(R.string.standalone_links_title))
            )
            .assertExists()
        goHome()
    }

    @Test
    fun verifySwitchControlsScreenOpens() {
        expandSpecificComponentTypesAccordion()
        composeTestRule
            .onNodeWithText(composeTestRule.activity.getString(R.string.switch_controls_title))
            .performScrollTo()
            .performClick()
        composeTestRule
            .onNode(
                hasTestTag(genericScaffoldTitleTestTag)
                and
                hasText(composeTestRule.activity.getString(R.string.switch_controls_title))
            )
            .assertExists()
        goHome()
    }

    @Test
    fun verifyTabRowsScreenOpens() {
        expandSpecificComponentTypesAccordion()
        composeTestRule
            .onNodeWithText(composeTestRule.activity.getString(R.string.tab_rows_title))
            .performScrollTo()
            .performClick()
        composeTestRule
            .onNode(
                hasTestTag(genericScaffoldTitleTestTag)
                and
                hasText(composeTestRule.activity.getString(R.string.tab_rows_title))
            )
            .assertExists()
        goHome()
    }

    @Test
    fun verifyTextFieldControlsScreenOpens() {
        expandSpecificComponentTypesAccordion()
        composeTestRule
            .onNodeWithText(composeTestRule.activity.getString(R.string.textfield_controls_title))
            .performScrollTo()
            .performClick()
        composeTestRule
            .onNode(
                hasTestTag(genericScaffoldTitleTestTag)
                and
                hasText(composeTestRule.activity.getString(R.string.textfield_controls_title))
            )
            .assertExists()
        goHome()
    }

    @Test
    fun verifyViewInteropScreenOpens() {
        expandSpecificComponentTypesAccordion()
        composeTestRule
            .onNodeWithText(composeTestRule.activity.getString(R.string.view_interop_title))
            .performScrollTo()
            .performClick()
        composeTestRule
            .onNode(
                hasTestTag(genericScaffoldTitleTestTag)
                and
                hasText(composeTestRule.activity.getString(R.string.view_interop_title))
            )
            .assertExists()
        goHome()
    }

    private fun expandInformativeContentAccordion() {
        composeTestRule
            .onNodeWithText(composeTestRule.activity.getString(R.string.home_informative_content))
            .performScrollTo()
            .performClick()
    }

    private fun expandInteractiveBehaviorsAccordion() {
        composeTestRule
            .onNodeWithText(composeTestRule.activity.getString(R.string.home_interactive_behaviors))
            .performScrollTo()
            .performClick()
    }

    private fun expandSpecificComponentTypesAccordion() {
        composeTestRule
            .onNodeWithText(composeTestRule.activity.getString(R.string.home_components))
            .performScrollTo()
            .performClick()
    }

    private fun goHome() {
        composeTestRule
            .onNodeWithTag(genericScaffoldBackButtonTestTag)
            .performClick()

        composeTestRule
            .onNodeWithTag(homeScreenTitleTestTag)
            .assertExists()
    }
}