<resources>
    <string name="app_name">Compose Accessibility Techniques</string>
    <string name="navigate_up">Navigate up</string>
    <string name="collapse_button_description">Collapse</string>
    <string name="expand_button_description">Expand</string>

    <!-- HomeScreen -->
    <string name="home_title">Home</string>
    <string name="home_heading">Android Compose Accessibility Techniques Demo App</string>
    <string name="home_description">This application demonstrates a variety of accessibility best practices for Jetpack Compose-based UIs, as well as the problems they can address.</string>
    <string name="home_description_2">Use the cards below to pick a topic area and follow the directions on the screen regarding the assistive technology employed in that demonstration.</string>

    <!-- Text alternatives -->
    <string name="text_alternatives_title">Text alternatives</string>
    <string name="text_alternatives_heading">Provide text alternatives for non-text content when appropriate</string>
    <string name="text_alternatives_description_1">All informative non-text content must have a text alternative associated with it, generally via the contentDescription property. Purely decorative content that conveys no meaning must be marked as such with a null contentDescription.</string>
    <string name="text_alternatives_description_2">Informative non-text content that is redundant with adjacent text content should be grouped with that text content and given a null contentDescription. See example 4 below.</string>
    <string name="text_alternatives_description_3">Turn on TalkBack and read the screen elements for examples.</string>
    <string name="text_alternatives_example_1_heading">Bad example 1: Sunrise and sunset times and icons with empty text alternatives</string>
    <string name="text_alternatives_example_sunrise_time">6:24am</string>
    <string name="text_alternatives_example_sunset_time">5:35pm</string>
    <string name="text_alternatives_example_2_heading">OK example 2: Sunrise and sunset times and icons with text alternatives</string>
    <string name="text_alternatives_example_sunrise_description">Sunrise</string>
    <string name="text_alternatives_example_sunset_description">Sunset</string>
    <string name="text_alternatives_example_3_heading">Good example 3: Sunrise and sunset times grouped with their icons</string>
    <string name="text_alternatives_example_4_heading">Good example 4: Sunrise and sunset times grouped with their icons and redundant text</string>
    <string name="text_alternatives_example_4_note">Note that almost all example headings in this app use a similar technique.</string>
    <string name="text_alternatives_example_5_heading">Good example 5: Sunrise and sunset times and icons with group text alternatives</string>
    <string name="text_alternatives_example_5_grouped_sunrise_text">Sunrise at 6:24am</string>
    <string name="text_alternatives_example_5_grouped_sunset_text">Sunset at 5:35pm</string>
    <string name="text_alternatives_example_6_heading">Bad example 6: A \'Share\' icon button with an empty text alternative</string>
    <string name="text_alternatives_example_6_message">Share icon with an empty text alternative clicked.</string>
    <string name="text_alternatives_example_6_note">Note that the \'Share\' icon with an empty text alternative cannot be selected with TalkBack.</string>
    <string name="text_alternatives_example_7_heading">Bad example 7: A \'Share\' icon button with a null text alternative</string>
    <string name="text_alternatives_example_7_message">Share icon with a null text alternative clicked.</string>
    <string name="text_alternatives_example_8_heading">Good example 8: A \'Share\' icon button with a text alternative</string>
    <string name="text_alternatives_example_8_content_description">Share</string>
    <string name="text_alternatives_example_8_message">Share icon with text alternative clicked.</string>
    <string name="text_alternatives_example_9_heading">Bad example 9: Decorative images with empty contentDescription</string>
    <string name="text_alternatives_example_9_decorated_text">Example decorated text.</string>
    <string name="text_alternatives_example_10_heading">Bad example 10: Decorative images with text alternatives</string>
    <string name="text_alternatives_example_10_content_description">Sprout</string>
    <string name="text_alternatives_example_10_decorated_text">Example decorated text.</string>
    <string name="text_alternatives_example_11_heading">Good example 11: Decorative images with null contentDescription</string>
    <string name="text_alternatives_example_11_decorated_text">Example decorated text.</string>
    <string name="text_alternatives_example_12_heading">OK example 12: Grouped decorative images with invisibleToUser()</string>
    <string name="text_alternatives_example_12_content_description">Sprout</string>
    <string name="text_alternatives_example_12_decorated_text">Example decorated text.</string>
    <string name="text_alternatives_example_13_heading">Good example 13: Grouped decorative images with null contentDescription</string>
    <string name="text_alternatives_example_13_decorated_text">Example decorated text.</string>

    <!-- Heading semantics -->
    <string name="heading_semantics_title">Heading semantics</string>
    <string name="heading_semantics_heading">Heading text must be marked as an accessibility heading</string>
    <string name="heading_semantics_description_1">Accessibility headings both convey the semantic meaning that text is a heading to a screen reader user and allow heading navigation in screen readers.</string>
    <string name="heading_semantics_description_2">Turn on TalkBack and read the following text for examples. Switch TalkBack to use the Reading Control \"Headings\" and swipe down and up to experience heading navigation.</string>
    <string name="heading_semantics_example_1_heading">Bad example 1: Big text that is not a heading</string>
    <string name="heading_semantics_example_1_body_text">Graphically large text won\'t act as a heading for accessibility purposes by itself; it must be marked as a heading.</string>
    <string name="heading_semantics_example_2_heading">Bad example 2: Ending contentDescription with \'Heading\' is not a heading</string>
    <string name="heading_semantics_faux_heading_content_description">%1$s, Heading.</string>
    <string name="heading_semantics_example_2_body_text">Marking a Composable with a contentDescription that appends \"Heading\" to the text does not give that Composable accessibility heading semantics. The large text above might announce \"Heading\" in TalkBack, but it is not recognized as having that role by the TalkBack \"Headings\" Reading Control.</string>
    <string name="heading_semantics_example_3_heading">Good example 3: Use semantics heading() property</string>
    <string name="heading_semantics_example_3_body_text">Composables can be marked as accessibility headings by adding the Modifier.semantics heading() property.</string>

    <!-- Interactive control labels -->
    <string name="interactive_control_labels_title">Interactive control labels</string>
    <string name="interactive_control_labels_heading">Associate interactive controls programmatically with labels</string>
    <string name="interactive_control_labels_description">Turn on TalkBack and swipe through this page to hear demonstrations of interactive controls with and without programmatically-associated labels.</string>
    <string name="interactive_control_labels_example_1">Bad example 1: TextField without associated field label</string>
    <string name="interactive_control_labels_unassociated_textfield_label">Text not associated with TextField</string>
    <string name="interactive_control_labels_example_2">Good example 2: TextField automatically associates label and uses as hint</string>
    <string name="interactive_control_labels_associated_textinput_label">Associated field label/hint</string>
    <string name="interactive_control_labels_example_3">Bad example 3: CheckBox without associated field label</string>
    <string name="interactive_control_labels_unassociated_checkbox_label">Text not associated with CheckBox</string>
    <string name="interactive_control_labels_example_4">Good example 4: CheckBox with associated field label</string>
    <string name="interactive_control_labels_associated_checkbox_label">Field label associated with CheckBox</string>
    <string name="interactive_control_labels_example_5">Bad example 5: Switch without associated field label</string>
    <string name="interactive_control_labels_unassociated_switch_label">Text not associated with Switch</string>
    <string name="interactive_control_labels_example_6">Good example 6: Switch with associated field label (text)</string>
    <string name="interactive_control_labels_associated_switch_label">Field label associated with Switch</string>
    <string name="interactive_control_labels_example_7">Bad example 7: RadioButton group without associated field labels, etc.</string>
    <string name="interactive_control_labels_unassociated_radio_button_label_1">Text not associated with RadioButton 1</string>
    <string name="interactive_control_labels_unassociated_radio_button_label_2">Text not associated with RadioButton 2</string>
    <string name="interactive_control_labels_example_8">Good example 8: RadioButton group with associated field labels, etc.</string>
    <string name="interactive_control_labels_radio_button_group_label">RadioButton group label</string>
    <string name="interactive_control_labels_associated_radio_button_label_1">Field label for RadioButton 1</string>
    <string name="interactive_control_labels_associated_radio_button_label_2">Field label for RadioButton 2</string>
    <string name="interactive_control_labels_example_9">Good example 9: Button with associated label</string>
    <string name="interactive_control_labels_associated_button_label">Button label</string>

    <!-- Accordion controls -->
    <string name="accordion_title">Accordion controls</string>
    <string name="accordion_heading">Accordion controls require an expand or collapse semantics property</string>
    <string name="accordion_description_1">Accordion controls must declare the appropriate Modifier.semantics expand() or collapse() action property, depending on their collapsed/expanded state, in addition to any tap to toggle action.</string>
    <string name="accordion_description_2">There are many ways to code these controls - as layout elements or list items, but all require this additional semantics in order to announce their expanded/collapsed state.</string>
    <string name="accordion_description_3">Turn on TalkBack, navigate the page, and activate the controls for a demonstration. Listen for expanded/collapsed state announcement as well as special expand/collapse actions.</string>
    <string name="accordion_section_1">Bad example 1: Accordion without expand/collapse actions</string>
    <string name="accordion_item_1_1">Incorrect Accordion example, Item 1</string>
    <string name="accordion_item_1_2">Incorrect Accordion example, Item 2</string>
    <string name="accordion_item_1_3">Incorrect Accordion example, Item 3</string>
    <string name="accordion_section_2">Good example 2: Accordion with expand/collapse actions</string>
    <string name="accordion_item_2_1">Correct Accordion example, Item 1</string>
    <string name="accordion_item_2_2">Correct Accordion example, Item 2</string>
    <string name="accordion_item_2_3">Correct Accordion example, Item 3</string>
    <string name="accordion_item_2_4">Correct Accordion example, Item 4</string>

</resources>