<resources>
    <string name="app_name">Compose Accessibility Techniques</string>
    <string name="navigate_up">Navigate up</string>
    <string name="collapse_button_description">Collapse</string>
    <string name="expand_button_description">Expand</string>

    <!-- HomeScreen -->
    <string name="home_title">Home</string>
    <string name="home_heading">Android Compose Accessibility Techniques Demo App</string>
    <string name="home_description">This application demonstrates a variety of accessibility best practices for Jetpack Compose-based UIs, as well as the problems they can address.</string>
    <string name="home_description_2">Use the cards below to pick a topic area and follow the directions on the screen regarding the assistive technology employed in that demonstration.</string>

    <!-- HeadingSemanticsScreen -->
    <string name="heading_semantics_title">Heading semantics</string>
    <string name="heading_semantics_heading">Heading text must be marked as an accessibility heading</string>
    <string name="heading_semantics_description_1">Accessibility headings both convey the semantic meaning that text is a heading to a screen reader user and allow heading navigation in screen readers.</string>
    <string name="heading_semantics_description_2">Turn on TalkBack and read the following text for examples. Switch TalkBack to use the Reading Control \"Headings\" and swipe down and up to experience heading navigation.</string>
    <string name="heading_semantics_example_1_heading">Bad example 1: Big text that is not a heading</string>
    <string name="heading_semantics_example_1_body_text">Graphically large text won\'t act as a heading for accessibility purposes by itself; it must be marked as a heading.</string>
    <string name="heading_semantics_example_2_heading">Bad example 2: Ending contentDescription with \'Heading\' is not a heading</string>
    <string name="heading_semantics_faux_heading_content_description">%1$s, Heading.</string>
    <string name="heading_semantics_example_2_body_text">Marking a Composable with a contentDescription that appends \"Heading\" to the text does not give that Composable accessibility heading semantics. The large text above might announce \"Heading\" in TalkBack, but it is not recognized as having that role by the TalkBack \"Headings\" Reading Control.</string>
    <string name="heading_semantics_example_3_heading">Good example 3: Use semantics heading() property</string>
    <string name="heading_semantics_example_3_body_text">Composables can be marked as accessibility headings by adding the Modifier.semantics heading() property.</string>

    <!-- InteractiveControlLabels -->
    <string name="interactive_control_labels_title">Interactive control labels</string>
    <string name="interactive_control_labels_heading">Associate interactive controls programmatically with labels</string>
    <string name="interactive_control_labels_description">Turn on TalkBack and swipe through this page to hear demonstrations of interactive controls with and without programmatically-associated labels.</string>
    <string name="interactive_control_labels_example_1">Bad example 1: TextField without associated field label</string>
    <string name="interactive_control_labels_unassociated_textfield_label">Text not associated with TextField</string>
    <string name="interactive_control_labels_example_2">Good example 2: TextField automatically associates label and uses as hint</string>
    <string name="interactive_control_labels_associated_textinput_label">Associated field label/hint</string>
    <string name="interactive_control_labels_example_3">Bad example 3: CheckBox without associated field label</string>
    <string name="interactive_control_labels_unassociated_checkbox_label">Text not associated with CheckBox</string>
    <string name="interactive_control_labels_example_4">Good example 4: CheckBox with associated field label</string>
    <string name="interactive_control_labels_associated_checkbox_label">Field label associated with CheckBox</string>
    <string name="interactive_control_labels_example_5">Bad example 5: Switch without associated field label</string>
    <string name="interactive_control_labels_unassociated_switch_label">Text not associated with Switch</string>
    <string name="interactive_control_labels_example_6">Good example 6: Switch with associated field label (text)</string>
    <string name="interactive_control_labels_associated_switch_label">Field label associated with Switch</string>
    <string name="interactive_control_labels_example_7">Bad example 7: RadioButton group without associated field labels, etc.</string>
    <string name="interactive_control_labels_unassociated_radio_button_label_1">Text not associated with RadioButton 1</string>
    <string name="interactive_control_labels_unassociated_radio_button_label_2">Text not associated with RadioButton 2</string>
    <string name="interactive_control_labels_example_8">Good example 8: RadioButton group with associated field labels, etc.</string>
    <string name="interactive_control_labels_radio_button_group_label">RadioButton group label</string>
    <string name="interactive_control_labels_associated_radio_button_label_1">Field label for RadioButton 1</string>
    <string name="interactive_control_labels_associated_radio_button_label_2">Field label for RadioButton 2</string>
    <string name="interactive_control_labels_example_9">Good example 9: Button with associated label</string>
    <string name="interactive_control_labels_associated_button_label">Button label</string>

    <!-- Accordion controls -->
    <string name="accordion_title">Accordion controls</string>
    <string name="accordion_heading">Accordion controls require an expand or collapse semantics property</string>
    <string name="accordion_description_1">Accordion controls must declare the appropriate Modifier.semantics expand() or collapse() action property, depending on their collapsed/expanded state, in addition to any tap to toggle action.</string>
    <string name="accordion_description_2">There are many ways to code these controls - as layout elements or list items, but all require this additional semantics in order to announce their expanded/collapsed state.</string>
    <string name="accordion_description_3">Turn on TalkBack, navigate the page, and activate the controls for a demonstration. Listen for expanded/collapsed state announcement as well as special expand/collapse actions.</string>
    <string name="accordion_section_1">Bad example 1: Accordion without expand/collapse actions</string>
    <string name="accordion_item_1_1">Incorrect Accordion example, Item 1</string>
    <string name="accordion_item_1_2">Incorrect Accordion example, Item 2</string>
    <string name="accordion_item_1_3">Incorrect Accordion example, Item 3</string>
    <string name="accordion_section_2">Good example 2: Accordion with expand/collapse actions</string>
    <string name="accordion_item_2_1">Correct Accordion example, Item 1</string>
    <string name="accordion_item_2_2">Correct Accordion example, Item 2</string>
    <string name="accordion_item_2_3">Correct Accordion example, Item 3</string>
    <string name="accordion_item_2_4">Correct Accordion example, Item 4</string>

</resources>