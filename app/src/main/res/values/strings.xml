<?xml version="1.0" encoding="utf-8"?>
<!--
   Copyright 2023 CVS Health and/or one of its affiliates

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<resources>
    <string name="app_name">Compose Accessibility Techniques</string>
    <string name="navigate_up">Navigate up</string>
    <string name="collapse_button_description">Collapse</string>
    <string name="expand_button_description">Expand</string>

    <!-- HomeScreen -->
    <string name="home_title">Home</string>
    <string name="home_heading">Android Compose Accessibility Techniques Demo App</string>
    <string name="home_description">This application demonstrates a variety of accessibility best practices for Jetpack Compose-based UIs, as well as the problems they can address.</string>
    <string name="home_description_2">Use the cards below to pick a topic area and follow the directions on the screen regarding the assistive technology employed in that demonstration.</string>
    <string name="home_informative_content">Informative Content</string>
    <string name="home_interactive_behaviors">Interactive Behaviors</string>
    <string name="home_components">Specific Component Types</string>

    <!-- Text alternatives -->
    <string name="text_alternatives_title">Text alternatives</string>
    <string name="text_alternatives_heading">Provide text alternatives for non-text content when appropriate</string>
    <string name="text_alternatives_description_1">All informative non-text content must have a text alternative associated with it, generally via the contentDescription property. Purely decorative content that conveys no meaning must be marked as such with a null contentDescription.</string>
    <string name="text_alternatives_description_2">Informative non-text content that is redundant with adjacent text content should be grouped with that text content and given a null contentDescription. See example 4 below.</string>
    <string name="text_alternatives_description_3">Turn on TalkBack and read the screen elements for examples.</string>
    <string name="text_alternatives_example_1_heading">Bad example 1: Sunrise and sunset times and icons with empty text alternatives</string>
    <string name="text_alternatives_example_sunrise_time">6:24am</string>
    <string name="text_alternatives_example_sunset_time">5:35pm</string>
    <string name="text_alternatives_example_2_heading">OK example 2: Sunrise and sunset times and icons with text alternatives</string>
    <string name="text_alternatives_example_sunrise_description">Sunrise</string>
    <string name="text_alternatives_example_sunset_description">Sunset</string>
    <string name="text_alternatives_example_3_heading">Good example 3: Sunrise and sunset times grouped with their icons</string>
    <string name="text_alternatives_example_4_heading">Good example 4: Sunrise and sunset times grouped with their icons and redundant text</string>
    <string name="text_alternatives_example_4_note">Note that almost all example headings in this app use a similar technique.</string>
    <string name="text_alternatives_example_5_heading">Good example 5: Sunrise and sunset times and icons with group text alternatives</string>
    <string name="text_alternatives_example_5_grouped_sunrise_text">Sunrise at 6:24am</string>
    <string name="text_alternatives_example_5_grouped_sunset_text">Sunset at 5:35pm</string>
    <string name="text_alternatives_example_6_heading">Bad example 6: A \'Share\' icon button with an empty text alternative</string>
    <string name="text_alternatives_example_6_message">Share icon with an empty text alternative clicked.</string>
    <string name="text_alternatives_example_6_note">Note that the \'Share\' icon with an empty text alternative cannot be selected with TalkBack.</string>
    <string name="text_alternatives_example_7_heading">Bad example 7: A \'Share\' icon button with a null text alternative</string>
    <string name="text_alternatives_example_7_message">Share icon with a null text alternative clicked.</string>
    <string name="text_alternatives_example_8_heading">Good example 8: A \'Share\' icon button with a text alternative</string>
    <string name="text_alternatives_example_8_content_description">Share</string>
    <string name="text_alternatives_example_8_message">Share icon with text alternative clicked.</string>
    <string name="text_alternatives_example_9_heading">Bad example 9: Decorative images with empty contentDescription</string>
    <string name="text_alternatives_example_9_decorated_text">Example decorated text.</string>
    <string name="text_alternatives_example_10_heading">Bad example 10: Decorative images with text alternatives</string>
    <string name="text_alternatives_example_10_content_description">Sprout</string>
    <string name="text_alternatives_example_10_decorated_text">Example decorated text.</string>
    <string name="text_alternatives_example_11_heading">Good example 11: Decorative images with null contentDescription</string>
    <string name="text_alternatives_example_11_decorated_text">Example decorated text.</string>
    <string name="text_alternatives_example_12_heading">OK example 12: Grouped decorative images with invisibleToUser()</string>
    <string name="text_alternatives_example_12_content_description">Sprout</string>
    <string name="text_alternatives_example_12_decorated_text">Example decorated text.</string>
    <string name="text_alternatives_example_13_heading">Good example 13: Grouped decorative images with null contentDescription</string>
    <string name="text_alternatives_example_13_decorated_text">Example decorated text.</string>

    <!-- Content grouping -->
    <string name="content_grouping_title">Content grouping</string>
    <string name="content_grouping_heading">Some content should be grouped for screen readers</string>
    <string name="content_grouping_description">Some text, particularly in simple tables, cards, and list items, should be read as single block by a screen reader, even when the content consists of separate Text composables. This enables a screen reader user to skip to the next content block instead of hearing each text separately. If a card or list item is clickable, this is handled automatically; otherwise, it should be done manually.</string>
    <string name="content_grouping_description_2">Turn on TalkBack and listen the following items for a demonstration.</string>
    <string name="content_grouping_table_examples">Simple table examples</string>
    <string name="content_grouping_table_example_1">Bad example 1: Ungrouped table</string>
    <string name="content_grouping_table_example_2">Bad example 2: Misgrouped table</string>
    <string name="content_grouping_table_example_3">Good example 3: Properly grouped table</string>
    <string name="content_grouping_table_example_header_1">City name</string>
    <string name="content_grouping_table_example_header_2">Population</string>
    <string name="content_grouping_table_example_header_3">Area (sq mi)</string>
    <string name="content_grouping_table_example_value_1">Boston</string>
    <string name="content_grouping_table_example_value_2">675,647</string>
    <string name="content_grouping_table_example_value_3">48.4</string>
    <string name="content_grouping_card_examples">Card examples</string>
    <string name="content_grouping_card1_title">Bad example 4: Card without grouped content</string>
    <string name="content_grouping_card1_author">First Author</string>
    <string name="content_grouping_card1_date">January, 2014</string>
    <string name="content_grouping_card1_description">This card does not group its content for screen readers. Note how you have to swipe through each separate Text.</string>
    <string name="content_grouping_card2_title">Good example 5: Card with grouped content</string>
    <string name="content_grouping_card2_author">Second Author</string>
    <string name="content_grouping_card2_date">March, 2020</string>
    <string name="content_grouping_card2_description">This card groups its content for screen readers using Modifier.semantics( mergeDescendants = true ). Note how a single swipe takes you to the next card.</string>
    <string name="content_grouping_card3_title">Good example 6: Another card with grouped content</string>
    <string name="content_grouping_card3_author">Third Author</string>
    <string name="content_grouping_card3_date">May, 2022</string>
    <string name="content_grouping_card3_description">This card groups its content by being clickable.</string>
    <string name="content_grouping_card3_message">Activating a card would normally open a detail view of the card\'s content.</string>

    <!-- Content group replacement -->
    <string name="content_group_replacement_title">Content group replacement</string>
    <string name="content_group_replacement_heading">Grouped content can be replaced to enhance screen reader experience</string>
    <string name="content_group_replacement_description">Sometimes the graphical components of a layout group do not convey their meaning well to screen readers, even if grouped into a single text. In this case, replace the screen reader text for the layout group with something better.</string>
    <string name="content_group_replacement_description_2">Turn on TalkBack and listen to the items on this page for a demonstration.</string>
    <string name="content_group_replacement_ungrouped_rating_heading">Bad example 1: Rating with content ungrouped</string>
    <string name="content_group_replacement_rating_group_heading">Bad example 2: Rating with content grouped</string>
    <string name="content_group_replacement_rating_group_note">Note how the LinearProgressIndicator is announced separately in TalkBack, despite the Row\'s merge semantics.</string>
    <string name="content_group_replacement_rating_group_replaced_heading">Good example 3: Rating with grouped content replaced with invisibleToUser()</string>
    <string name="content_group_replacement_rating_group_overridden_heading">Good example 4: Rating with grouped content replaced with mergeAndSetSemantics</string>
    <string name="content_group_replacement_rating_label">Rating: </string>
    <string name="content_group_replacement_rating_text">%1$s / %2$s</string>
    <string name="content_group_replacement_reviews">Reviews: %1$d</string>
    <plurals name="content_group_replacement_rating_group_content_description">
        <item quantity="one">Rating: %1$s out of %2$s stars, based on %3$d review</item>
        <item quantity="other">Rating: %1$s out of %2$s stars, based on %3$d reviews</item>
    </plurals>

    <!-- Heading semantics -->
    <string name="heading_semantics_title">Heading semantics</string>
    <string name="heading_semantics_heading">Heading text must be marked as an accessibility heading</string>
    <string name="heading_semantics_description_1">Accessibility headings both convey the semantic meaning that text is a heading to a screen reader user and allow heading navigation in screen readers.</string>
    <string name="heading_semantics_description_2">Turn on TalkBack and read the following text for examples. Switch TalkBack to use the Reading Control \"Headings\" and swipe down and up to experience heading navigation.</string>
    <string name="heading_semantics_example_1_heading">Bad example 1: Big text that is not a heading</string>
    <string name="heading_semantics_example_1_body_text">Graphically large text won\'t act as a heading for accessibility purposes by itself; it must be marked as a heading.</string>
    <string name="heading_semantics_example_2_heading">Bad example 2: Ending contentDescription with \'Heading\' is not a heading</string>
    <string name="heading_semantics_faux_heading_content_description">%1$s, Heading.</string>
    <string name="heading_semantics_example_2_body_text">Marking a Composable with a contentDescription that appends \"Heading\" to the text does not give that Composable accessibility heading semantics. The large text above might announce \"Heading\" in TalkBack, but it is not recognized as having that role by the TalkBack \"Headings\" Reading Control.</string>
    <string name="heading_semantics_example_3_heading">Good example 3: Use semantics heading() property</string>
    <string name="heading_semantics_example_3_body_text">Composables can be marked as accessibility headings by adding the Modifier.semantics heading() property.</string>

    <!-- List semantics -->
    <string name="list_semantics_title">List semantics</string>
    <string name="list_semantics_heading">Mark visual lists with accessibility list semantics</string>
    <string name="list_semantics_description_1">Lists created with LazyColumn and LazyRow automatically provide list semantics to accessibility services like TalkBack, reading things like “in list” / “out of list” and “1 of 5.” However, visual lists created with Column or Row need to have list semantics added via the collectionInfo and collectionItemInfo semantics properties.</string>
    <string name="list_semantics_description_2">Turn on TalkBack and swipe through this page to hear demonstrations of visual lists without and with list semantics applied.</string>
    <string name="list_semantics_bullet_point_alt_text">Bullet.</string>
    <string name="list_semantics_example_1">Bad example 1: Visual list without list semantics</string>
    <string name="list_semantics_bad_point_1">Bad example, Point 1</string>
    <string name="list_semantics_bad_point_2">Bad example, Point 2</string>
    <string name="list_semantics_bad_point_3">Bad example, Point 3</string>
    <string name="list_semantics_after_bad_example">Text after a non-semantic visual list.</string>
    <string name="list_semantics_example_2">Good example 2: Bullet list with list semantics</string>
    <string name="list_semantics_good_point_1">Good example, Point 1</string>
    <string name="list_semantics_good_point_2">Good example, Point 2</string>
    <string name="list_semantics_good_point_3">Good example, Point 3</string>
    <string name="list_semantics_after_list">Text after a semantic bullet list.</string>
    <string name="list_semantics_example_3">Good example 3: Numbered list with list semantics</string>
    <string name="list_semantics_good_point_1_numbered">1. Good numbered example, Point 1</string>
    <string name="list_semantics_good_point_2_numbered">2. Good numbered example, Point 2</string>
    <string name="list_semantics_good_point_3_numbered">3. Good numbered example, Point 3</string>
    <string name="list_semantics_after_list_2">Text after a semantic numbered list.</string>
    <string name="list_semantics_example_4">Good example 4: LazyRow list with automatic list semantics</string>
    <string name="list_semantics_lazyrow_1">LazyRow 1</string>
    <string name="list_semantics_lazyrow_2">LazyRow 2</string>
    <string name="list_semantics_lazyrow_3">LazyRow 3</string>
    <string name="list_semantics_lazyrow_4">LazyRow 4</string>
    <string name="list_semantics_lazyrow_5">LazyRow 5</string>
    <string name="list_semantics_lazyrow_6">LazyRow 6</string>
    <string name="list_semantics_after_list_3">Text after a LazyRow list.</string>

    <!-- Interactive control labels -->
    <string name="interactive_control_labels_title">Interactive control labels</string>
    <string name="interactive_control_labels_heading">Associate interactive controls programmatically with labels</string>
    <string name="interactive_control_labels_description">Turn on TalkBack and swipe through this page to hear demonstrations of interactive controls with and without programmatically-associated labels.</string>
    <string name="interactive_control_labels_example_1">Bad example 1: TextField without associated field label</string>
    <string name="interactive_control_labels_unassociated_textfield_label">Text not associated with TextField</string>
    <string name="interactive_control_labels_example_2">Good example 2: TextField automatically associates label and uses as hint</string>
    <string name="interactive_control_labels_associated_textinput_label">Associated field label/hint</string>
    <string name="interactive_control_labels_example_3">Bad example 3: CheckBox without associated field label</string>
    <string name="interactive_control_labels_unassociated_checkbox_label">Text not associated with CheckBox</string>
    <string name="interactive_control_labels_example_4">Good example 4: CheckBox with associated field label</string>
    <string name="interactive_control_labels_associated_checkbox_label">Field label associated with CheckBox</string>
    <string name="interactive_control_labels_example_5">Bad example 5: Switch without associated field label</string>
    <string name="interactive_control_labels_unassociated_switch_label">Text not associated with Switch</string>
    <string name="interactive_control_labels_example_6">Good example 6: Switch with associated field label (text)</string>
    <string name="interactive_control_labels_associated_switch_label">Field label associated with Switch</string>
    <string name="interactive_control_labels_example_7">Bad example 7: RadioButton group without associated field labels, etc.</string>
    <string name="interactive_control_labels_unassociated_radio_button_label_1">Text not associated with RadioButton 1</string>
    <string name="interactive_control_labels_unassociated_radio_button_label_2">Text not associated with RadioButton 2</string>
    <string name="interactive_control_labels_example_8">Good example 8: RadioButton group with associated field labels, etc.</string>
    <string name="interactive_control_labels_radio_button_group_label">RadioButton group label</string>
    <string name="interactive_control_labels_associated_radio_button_label_1">Field label for RadioButton 1</string>
    <string name="interactive_control_labels_associated_radio_button_label_2">Field label for RadioButton 2</string>
    <string name="interactive_control_labels_example_9">Good example 9: Button with associated label</string>
    <string name="interactive_control_labels_associated_button_label">Button label</string>

    <!-- Keyboard types and options -->
    <string name="keyboard_types_title">Keyboard types and options</string>
    <string name="keyboard_types_heading">Match keyboard type and options to input data</string>
    <string name="keyboard_types_description_1">Text input fields should configure a keyboard type and options appropriate to the data they accept. An inappropriate keyboard type can make data entry harder or even impossible.</string>
    <string name="keyboard_types_description_2">Select each field below for editing and observe the soft keyboard type displayed.</string>
    <string name="keyboard_types_example_1_header">Bad example 1: Numeric keyboard type prevents name text data entry</string>
    <string name="keyboard_types_example_1_label">Name</string>
    <string name="keyboard_types_example_2_header">Bad example 2: Decimal Keyboard type allows most data entry, but is not specific to the Phone field data type</string>
    <string name="keyboard_types_example_2_label">Phone</string>
    <string name="keyboard_types_example_3_header">Good example 3: Keyboard type for phone number (Phone)</string>
    <string name="keyboard_types_example_3_label">Phone</string>
    <string name="keyboard_types_example_4_header">Good example 4: Keyboard type for number (Number)</string>
    <string name="keyboard_types_example_4_label">Count</string>
    <string name="keyboard_types_example_5_header">Good example 5: Keyboard type for decimal number (Decimal)</string>
    <string name="keyboard_types_example_5_label">Price</string>
    <string name="keyboard_types_example_6_header">Good example 6: Keyboard type for generic text (Text)</string>
    <string name="keyboard_types_example_6_label">Text</string>
    <string name="keyboard_types_example_7_header">Good example 7: Keyboard type for full ASCII text (Ascii)</string>
    <string name="keyboard_types_example_7_label">ASCII Text</string>
    <string name="keyboard_types_example_8_header">Good example 8: Keyboard options for capitalized words (e.g., names)</string>
    <string name="keyboard_types_example_8_label">Name</string>
    <string name="keyboard_types_example_9_header">Good example 9: Keyboard options for sentences with autocorrect</string>
    <string name="keyboard_types_example_9_label">Description</string>
    <string name="keyboard_types_example_10_header">Good example 10: Keyboard options for sentences without autocorrect</string>
    <string name="keyboard_types_example_10_label">Description</string>
    <string name="keyboard_types_example_11_header">Good example 11: Keyboard type for email (Email)</string>
    <string name="keyboard_types_example_11_label">Email</string>
    <string name="keyboard_types_example_12_header">Good example 12: Keyboard type for URL (Uri)</string>
    <string name="keyboard_types_example_12_label">URL</string>
    <string name="keyboard_types_example_13_header">Good example 13: Keyboard type for text passwords (Password), plus masking</string>
    <string name="keyboard_types_example_13_label">Password (text)</string>
    <string name="keyboard_types_example_14_header">Good example 14: Keyboard type for numeric passwords (NumberPassword), plus masking</string>
    <string name="keyboard_types_example_14_label">Password (numeric)</string>

    <!-- Custom accessibility actions -->
    <string name="custom_accessibility_actions_title">Custom accessibility actions</string>
    <string name="custom_accessibility_actions_heading">Simplify screen reader user experience with custom accessibility actions</string>
    <string name="custom_accessibility_actions_description_1">Turn on TalkBack and swipe through this page to hear demonstrations of cards with and without custom accessibility actions. Clicking on cards and buttons displays a snackbar message.</string>
    <string name="custom_accessibility_actions_description_2">Alternatively, turn on Switch Access with two-button linear scanning, and use the Next switch to move through this page to see which elements are selectable. Use the Select switch on the good example cards to see their custom accessibility actions.</string>
    <string name="custom_accessibility_actions_see_details">See details</string>
    <string name="custom_accessibility_actions_example_1_card_heading">Bad example 1: Card without custom accessibility actions</string>
    <string name="custom_accessibility_actions_example_1_card_description">Note how each button must be read as a separate item in TalkBack before the next card is read. TalkBack does not read \"Actions available…\" on this card.</string>
    <string name="custom_accessibility_actions_example_2_card_heading">Good example 2: Card with custom accessibility actions</string>
    <string name="custom_accessibility_actions_example_2_card_description">Note how the card is read as a single item. Buttons have become custom accessibility actions; TalkBack reads \"Actions available…\" and one swipe takes you to the next card instead of to a button within the card.</string>
    <string name="custom_accessibility_actions_example_3_card_heading">Good example 3: Another card with custom accessibility actions</string>
    <string name="custom_accessibility_actions_example_3_card_description">TalkBack also reads \"Actions available…\" on this card. Open the TalkBack menu and then the Actions menu to perform the buttons\' actions, or select the card with Switch Access. Isn\'t that easier to use?</string>
    <string name="custom_accessibility_actions_example_like_button">Like this post</string>
    <string name="custom_accessibility_actions_example_share_button">Share this post</string>
    <string name="custom_accessibility_actions_example_report_button">Report this post as inappropriate</string>
    <string name="custom_accessibility_actions_show_details_event">Selected to show details of card example #%1$d</string>
    <string name="custom_accessibility_actions_like_event">Selected to like card example #%1$d</string>
    <string name="custom_accessibility_actions_share_event">Selected to share card example #%1$d</string>
    <string name="custom_accessibility_actions_report_event">Selected to report card example #%1$d as inappropriate</string>

    <!-- Accordion controls -->
    <string name="accordion_title">Accordion controls</string>
    <string name="accordion_heading">Accordion controls require an expand or collapse semantics property</string>
    <string name="accordion_description_1">Accordion controls must declare the appropriate Modifier.semantics expand() or collapse() action property, depending on their collapsed/expanded state, in addition to any tap to toggle action.</string>
    <string name="accordion_description_2">There are many ways to code these controls - as layout elements or list items, but all require this additional semantics in order to announce their expanded/collapsed state.</string>
    <string name="accordion_description_3">Turn on TalkBack, navigate the page, and activate the controls for a demonstration. Listen for expanded/collapsed state announcement as well as special expand/collapse actions.</string>
    <string name="accordion_section_1">Bad example 1: Accordion without expand/collapse actions</string>
    <string name="accordion_item_1_1">Incorrect Accordion example, Item 1</string>
    <string name="accordion_item_1_2">Incorrect Accordion example, Item 2</string>
    <string name="accordion_item_1_3">Incorrect Accordion example, Item 3</string>
    <string name="accordion_section_2">Good example 2: Accordion with expand/collapse actions</string>
    <string name="accordion_item_2_1">Correct Accordion example, Item 1</string>
    <string name="accordion_item_2_2">Correct Accordion example, Item 2</string>
    <string name="accordion_item_2_3">Correct Accordion example, Item 3</string>
    <string name="accordion_item_2_4">Correct Accordion example, Item 4</string>

    <!-- RadioButton groups -->
    <string name="radio_button_groups_title">RadioButton groups</string>
    <string name="radio_button_groups_heading">RadioButton groups require the selectableGroup modifier; RadioButtons require labels</string>
    <string name="radio_button_groups_description_1">Layout composables which group RadioButton composables require Modifier.selectableGroup(). Individual RadioButton composables require a wrapping layout that subsumes their semantics and provides a control label.</string>
    <string name="radio_button_groups_description_2">Turn on TalkBack, navigate the page, and activate the controls for demonstrations of inaccessible and accessible RadioButton groups.</string>
    <string name="radio_button_groups_example_1_header">Bad example 1: Inaccessible RadioButton group</string>
    <string name="radio_button_groups_example_2_header">Good example 2: Accessible RadioButton group</string>
    <string name="radio_button_groups_group_label">Pick a fruit:</string>
    <string name="radio_button_groups_option_1">Banana</string>
    <string name="radio_button_groups_option_2">Grape</string>
    <string name="radio_button_groups_option_3">Orange</string>

    <!-- Checkbox controls -->
    <string name="checkbox_controls_title">Checkbox controls</string>
    <string name="checkbox_controls_heading">Checkbox controls require labels and Modifier.toggleable</string>
    <string name="checkbox_controls_description_1">Checkbox composables require a wrapping layout that subsumes their semantics (using Modifier.toggleable and Role.Checkbox) and provides a control label.</string>
    <string name="checkbox_controls_description_2">Turn on TalkBack, navigate the page, and activate the controls for demonstrations of inaccessible and accessible Checkbox groups.</string>
    <string name="checkbox_controls_example_1_header">Bad example 1: Inaccessible Checkbox</string>
    <string name="checkbox_controls_example_1_label">Faux checkbox</string>
    <string name="checkbox_controls_example_2_header">Good example 2: Accessible Checkbox</string>
    <string name="checkbox_controls_example_2_label">Accessible checkbox</string>

    <!-- Switch controls -->
    <string name="switch_controls_title">Switch controls</string>
    <string name="switch_controls_heading">Switch controls require labels and Modifier.toggleable</string>
    <string name="switch_controls_description_1">Switch composables require a wrapping layout that subsumes their semantics (using Modifier.toggleable and Role.Switch) and provides a control label.</string>
    <string name="switch_controls_description_2">Turn on TalkBack, navigate the page, and activate the controls for demonstrations of inaccessible and accessible Switch groups.</string>
    <string name="switch_controls_example_1_header">Bad example 1: Inaccessible Switch</string>
    <string name="switch_controls_example_1_label">Faux switch</string>
    <string name="switch_controls_example_2_header">Good example 2: Accessible Switch</string>
    <string name="switch_controls_example_2_label">Accessible switch</string>

</resources>